50. Pow(x, n)
实现 pow(x, n) ，即计算 x 的 n 次幂函数。

示例 1:

输入: 2.00000, 10
输出: 1024.00000
示例 2:

输入: 2.10000, 3
输出: 9.26100
示例 3:

输入: 2.00000, -2
输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25
说明:

-100.0 < x < 100.0
n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。

解题思路：
求 xn最简单的方法是通过循环将 n 个 x 乘起来，依次求 x1, x2, ..., xn-1, xn ，时间复杂度为 O(n)。
快速幂法 可将时间复杂度降低至 O(logn) 
快速幂解析（二进制角度）：
利用十进制数字 n 的二进制表示，可对快速幂进行数学化解释。

对于任何十进制正整数 n ，设其二进制为 "bm ...b3b2b 1"（b i为二进制某位值，i∈[1,m] ），则有：
二进制转十进制： n=1b1+2b2+4b3+...+2m−1bm（即二进制转十进制公式） ；
幂的二进制展开： x^n=x^(1b1+2b2+4b3+...+2^(m-1) bm)=x^1b1 x^2b2 x^3b3…x^(2^(m-1) bm)
根据以上推导，可把计算xn转化为解决以下两个问题：
计算 x 1 ,x 2 ,x 4 ,...,x 2 m−1  的值： 循环赋值操作 x=x 2即可；
获取二进制各位b 1,b 2 ,b 3 ,...,b m 的值： 循环执行以下操作即可。
n&1 （与操作）： 判断 n 二进制最右一位是否为 11 ；
n>>1 （移位操作）： n 右移一位（可理解为删除最后一位）。
因此，应用以上操作，可在循环中依次计算x^(2^0 b_1 ) x^(2^1 b_2 )…x^(2^(m-1) b_m )的值，并将所有x^(2^(i-1) b_i )累计相乘即可，其中：
"x" ^("2" ^"i-1"  "b" _"i"  ) "=" {█("1,       bi=0" @"x" ^("2" ^"i-1"  ) ",bi=1" )┤

代码
class Solution {
    public double myPow(double x, int n) {
        double res = 1.0;
        for(int i = n; i!=0; i/=2){
            if(i%2!=0){
                res *= x;
            }
            x *= x;
        }
        return n>0?res:1/res;
    }
}

